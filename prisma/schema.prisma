generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String           @id @default(cuid())
  code                String?          @unique
  email               String?          @unique
  emailVerified       DateTime?
  passwordDigest      String?
  phoneNumber         String           @unique
  phoneNumberVerified DateTime?
  role                UserRole         @default(DRIVER)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  pin                 String?
  pinCreatedAt        DateTime?
  pinType             String?
  pinVerifiedAt       DateTime?
  profile             Profile?
  tags                String[]         @default([])
  vehicle             Vehicle[]
  transportation      Transportation[]
}

model Tags {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#fff")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id                 String    @id @default(cuid())
  userId             String    @unique
  firstName          String    @default("")
  lastName           String    @default("")
  sex                String?
  dob                String?
  height             Int?
  weight             Int?
  picture            String?
  priceMin           Int?
  priceMax           Int?
  notifyEmail        Boolean   @default(true)
  notifyPush         Boolean   @default(true)
  notifyBadge        Boolean   @default(true)
  historyId          String?   @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model SmsRequestAttempt {
  id          String   @id @default(cuid())
  phoneNumber String
  ipAddress   String
  createdAt   DateTime @default(now())
}

model FileUpload {
  id                   String    @id @default(cuid())
  fileGroup            String?
  fileLink             String
  fileSource           String
  removedAt            DateTime?
  createdBy            String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  fileCategory         String?
  fileSourceDate       String?
  patientNoteId        String?
  fileMIMEType         String
  specialistQuestionId String?
}

enum UserRole {
  ADMIN
  DRIVER
}

model IP2Location {
  id          String   @id @default(cuid())
  ipFrom      BigInt
  ipTo        BigInt
  countryCode String
  country     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FirebaseToken {
  id        String   @id @default(cuid())
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vehicle {
  id             String           @id @default(cuid())
  plateNumber    String           @unique
  cabinNumber    String?
  countryName    String?
  markName       String?
  modelName      String?
  buildYear      Int?
  colorName      String?
  type           String?
  ownerType      String?
  intent         String?
  className      String?
  motorNumber    String?
  importDate     String?
  fuelType       String?
  manCount       Int?
  axleCount      Int?
  capacity       Float?
  mass           Float?
  weight         Float?
  length         Float?
  width          Float?
  height         Float?
  transmission   String?
  wheelPosition  String?
  rfid           String?
  description    String?
  driverId       String?
  driver         User?            @relation(fields: [driverId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Transportation Transportation[]
}

model TransportLocation {
  id                     String               @id @default(cuid())
  shortName              String
  description            String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  startingTransportation TransportDirection[] @relation("StartingTransportation")
  endingTransportation   TransportDirection[] @relation("EndingTransportation")
}

model TransportDirection {
  id                 String            @id @default(cuid())
  shortName          String
  totalDistance      Int?
  totalTime          Int?
  startingLocationId String
  endingLocationId   String
  costPerKm          Decimal           @default(0) @db.Decimal(18, 2)
  costPerKmData      Json[]            @default([]) //[{date: "2024-01-01", cost: 1000}]
  startingLocation   TransportLocation @relation(fields: [startingLocationId], references: [id], onDelete: Cascade, name: "StartingTransportation")
  endingLocation     TransportLocation @relation(fields: [endingLocationId], references: [id], onDelete: Cascade, name: "EndingTransportation")
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  transportation     Transportation[]
}

model Transportation {
  id                    String                 @id @default(cuid())
  date                  String
  documentDate          String
  vehicleId             String
  vehicle               Vehicle                @relation(fields: [vehicleId], references: [id])
  driverId              String
  driver                User                   @relation(fields: [driverId], references: [id])
  transportDirectionId  String
  transportDirection    TransportDirection     @relation(fields: [transportDirectionId], references: [id])
  initialWeightTemp     Decimal                @default(0) @db.Decimal(18, 2)
  documentWeightTemp    Decimal                @default(0) @db.Decimal(18, 2)
  weightTon             Decimal                @default(0) @db.Decimal(18, 2)
  total                 Decimal                @default(0) @db.Decimal(18, 2)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  transportationExpense TransportationExpense?
}

model TransportationExpense {
  id               String         @id @default(cuid())
  transportationId String         @unique
  transportation   Transportation @relation(fields: [transportationId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}
